program        → declaration* EOF ;

declaration    → letDecl
               | statement ;

letDecl        → "let" IDENTIFIER ( "=" expression )? ";" ;

statement      → exprStmt
               | printStmt ;
               | ifStmt
               | block

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;
ifStmt         → "if" "(" expression ")" statement
                 "else" "{" statement "}"?
block          → "{" declaration* "}" ;

expression     → assignment ;
assignment     → IDENTIFIER "=" assignment
               | logic_or ;
logic_or       → logic_and ( "||" logic_and )* ;
logic_and      → equality ( "&&" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | atom ;

atom           → IDENTIFIER
               | NUMBER | STRING | BOOL | CHAR
               | "null"
               | "(" expression ")" ;